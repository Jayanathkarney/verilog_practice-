module MUL_datapath (
    output eqz,
    input LdA, LdB, LdP, clrP, decB,
    input [15:0] data_in,
    input clk,
    output [15:0] X_out, Y_out
);

  wire [15:0] X, Y, Z, Bout, Bus;

  assign Bus = data_in;
  assign X_out = X;
  assign Y_out = Y;

  PIPO1 A (X, Bus, LdA, clk); 
  PIPO2 P (Y, Z, LdP, clrP, clk); 
  CNTR  B (Bout, Bus, LdB, decB, clk); 
  ADD   AD (Z, X, Y); 
  EQZ   COMP (eqz, Bout); 

endmodule 

module PIPO1 (output reg [15:0] dout, input [15:0] din, input ld, clk); 
  always @(posedge clk) 
    if (ld) dout <= din; 
endmodule 

module ADD (output reg [15:0] out, input [15:0] in1, in2); 
  always @(*) 
    out = in1 + in2; 
endmodule 

module PIPO2 (output reg [15:0] dout, input [15:0] din, input ld, clr, clk); 
  always @(posedge clk) 
    if (clr) dout <= 16'b0; 
    else if (ld) dout <= din; 
endmodule 

module EQZ (output eqz, input [15:0] data); 
  assign eqz = (data == 0);
endmodule 

module CNTR (output reg [15:0] dout, input [15:0] din, input ld, dec, clk); 
  always @(posedge clk) 
    if (ld) dout <= din; 
    else if (dec) dout <= dout - 1; 
endmodule 

module controller (
    output reg LdA, LdB, LdP, clrP, decB, done,
    input clk, eqz, start
);

  reg [2:0] state;
  parameter S0 = 3'b000, S1 = 3'b001, S2 = 3'b010, S3 = 3'b011, S4 = 3'b100;

  always @(posedge clk) begin
    case (state)
      S0: if (start) state <= S1;
      S1: state <= S2;
      S2: state <= S3;
      S3: if (eqz) state <= S4;
      S4: state <= S4;
      default: state <= S0;
    endcase
  end

  always @(*) begin
    // Default values
    LdA = 0; LdB = 0; LdP = 0; clrP = 0; decB = 0; done = 0;

    case (state)
      S1: LdA = 1;
      S2: begin LdB = 1; clrP = 1; end
      S3: begin LdP = 1; decB = 1; end
      S4: done = 1;
    endcase
  end

endmodule

